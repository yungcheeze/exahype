/**
 * 
 * Euler Flow
 * 
 * This setup corresponds to the Finite Volume demonstrator code as discussed in 
 * Section 2 of the guidebook. To keep stuff here extremely simple, the spec file 
 * does not contain any global-optimisations or any parallelisation. How to add parallel
 * features is solely described in the guidebook.
 * 
 * 
 * This file is part of the ExaHyPE project.
 * Copyright (c) 2016  http://exahype.eu
 * All rights reserved.
 *
 * The project has received funding from the European Union's Horizon 
 * 2020 research and innovation programme under grant agreement
 * No 671698. For copyrights and licensing, please consult the webpage.
 *
 * Released under the BSD 3 Open Source License.
 * For the full license text, see LICENSE.txt
 */
exahype-project EulerFV
  peano-kernel-path const          = ./Peano
  exahype-path const               = ./ExaHyPE
  output-directory const           = ./Demonstrators/EulerFV
  log-file                         = logfile.log

  computational-domain
    dimension const         = 2
    width                   = 1.0, 1.0
    offset                  = 0.0, 0.0
    end-time                = 0.1
  end computational-domain
 
  shared-memory
    identifier = dummy
    cores = 4
    properties-file = sharedmemory.properties
  end shared-memory

  /*
   ===========================================
   Comment this stuff in to get an MPI version
   ===========================================
  distributed-memory
    identifier               = static_load_balancing
    configure                = {greedy-naive,FCFS}
    buffer-size              = 64
    timeout                  = 60
  end distributed-memory
  */

 global-optimisation
    fuse-algorithmic-steps          = on
    fuse-algorithmic-steps-factor   = 0.99
    /* 0.0 und 0.8 sind schon mal zwei Faktoren */
    timestep-batch-factor           = 0.0
    skip-reduction-in-batched-time-steps = on
    disable-amr-if-grid-has-been-stationary-in-previous-iteration = off
    double-compression = 1e-8
    spawn-double-compression-as-background-thread = off
  end global-optimisation 

  solver Finite-Volumes MyEulerSolver
    variables const    = rho:1,j:3,E:1
    patch-size const   = 10
    maximum-mesh-size  = 2e-2    
    time-stepping      = global
    type const         = godunov
    terms const        = flux
	optimisation const = generic
    
    language const    = C
    plot vtu::Cartesian::cells::ascii EulerWriter
      variables const = 5
      time            = 0.0
      repeat          = 0.01
      output          = ./variables
    end plot
  end solver
end exahype-project
